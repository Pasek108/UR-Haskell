{-------------------------------------------------------------------------------

4.8.1 In the Lists module, place the definitions of the factors and prime
      functions from slide 45. Test their operation. Analyze the operation of 
      the following function:
  
      primes :: [Integer]
      primes = filter prime [2 ..]

Tip: To stop the calculation, use the Ctrl + C combination.

-------------------------------------------------------------------------------}

factors :: Integer -> [Integer]
factors n = [x | x <- [1..n], n `mod` x == 0]

prime :: Integer -> Bool
prime n = factors n == [1,n]

primes :: [Integer]
primes = filter prime [2 ..]

{-

ghci> primes
[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,
107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,
223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,
337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,
457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,
593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,
719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,
857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,
997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,
1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,
1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,
1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,
1459,1471,1481,Interrupted.

ghci> take 10 primes
[2,3,5,7,11,13,17,19,23,29]

-}

{-------------------------------------------------------------------------------

4.8.2 Add the pairs function and analyze its operation on sample lists with 
      integers:

      pairs :: [Integer] -> [(Integer, Integer)]
      pairs (x:y:[])  | x + 2 == y = [(x,y)]
                      | otherwise = []
      pairs (x:y:xys) | x + 2 == y = (x,y) : pairs (y:xys)
                      | otherwise = pairs (y:xys)

-------------------------------------------------------------------------------}

pairs :: [Integer] -> [(Integer, Integer)]
pairs (x:y:[])  | x + 2 == y = [(x,y)]
                | otherwise = []
pairs (x:y:xys) | x + 2 == y = (x,y) : pairs (y:xys)
                | otherwise = pairs (y:xys)

{-

ghci> pairs [1,2,3]
[]
ghci> pairs [1,2,3,4,5,6,7,8,9]
[]
ghci> pairs [1,2,3,4,5,6,7,8,9,10,11,12,13,14]
[]
ghci> pairs [1,3]
[(1,3)]
ghci> pairs [1,3,5]
[(1,3),(3,5)]
ghci> pairs [1,3,5,8,9,10]
[(1,3),(3,5)]

-}

{-------------------------------------------------------------------------------

4.8.3 Define a primePairs function that returns a list of pairs of prime numbers
      such that the second element of the pair is 2 greater than the first.

-------------------------------------------------------------------------------}

primePairs = pairs (filter prime [2 ..])

{-

ghci> primePairs
[(3,5),(5,7),(11,13),(17,19),(29,31),(41,43),(59,61),(71,73),(101,103),
(107,109),(137,139),(149,151),(179,181),(191,193),(197,199),(227,229),
(239,241),(269,271),(281,283),(311,313),(347,349),(419,421),(431,433),
(461,463),(521,523),(569,571),(599,601),(617,619),(641,643),(659,661),
(809,811),(821,823),(827,829),(857,859),(881,883),(1019,1021),(1031,1033),
(1049,1051),(1061,1063),(1091,1093),(1151,1153),(1229,1231),(1277,1279),
(1289,1291),(1301,1303),(1319,1321),(1427,1429),(1451,1453),(1481,1483),
(1487,1489),(1607,1609),(1619,1621),(1667,1669),(1697,1699),(1721,1723),
(1787,1789),(1871,1873),(1877,1879),(1931,1933),(1949,1951),(1997,1999),
(2027,2029),(2081,2083),(2087,2089),(2111,2113),(2129,2131),(2141,2143),
(2237,2239),(2267,2269),(2309,2311),(2339,2341),(2381,2383),(2549,2551),
(2591,2593),(2657,2659),(2687,2689),(2711,2713),(2729,2731),(2789,2791),
(2801,2803),(2969,2971),(2999,3001),Interrupted.

-}

{-------------------------------------------------------------------------------

4.8.4 Define a primeTriples function that returns a list of triples of prime
      numbers such that the second element of the triple is 2 greater than the 
      first and the third element is two greater than the second.

-------------------------------------------------------------------------------}

triples :: [Integer] -> [(Integer, Integer, Integer)]
triples (x:y:z:[])   | x + 2 == y && y + 2 == z = [(x,y,z)]
                     | otherwise = []
triples (x:y:z:xyzs) | x + 2 == y && y + 2 == z= (x,y,z) : triples (y:z:xyzs)
                     | otherwise = triples (y:z:xyzs)

primeTriples = triples (filter prime [2 ..])

{-

ghci> primeTriples
[(3,5,7),Interrupted.

-}
